import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
from torch.utils.data import TensorDataset, DataLoader
from scipy.stats import norm
from sklearn.model_selection import train_test_split


def black_scholes_call(S, t, sigma, r, K=100, T=1):
    """
    Computes the European call option price using the Blackâ€“Scholes formula.
    This is valid for t < T (before expiration) where the option has time value.
    """
    tau = T - t  # time to maturity
    d1 = np.where(tau > 1e-8, (np.log(S/K) + (r + 0.5 * sigma**2) * tau) / (sigma * np.sqrt(tau)), 0.0)
    d2 = np.where(tau > 1e-8, d1 - sigma * np.sqrt(tau), 0.0)
    price = np.where(tau > 1e-8,
                     S * norm.cdf(d1) - K * np.exp(-r * tau) * norm.cdf(d2),
                     np.maximum(S-K, 0.0))
    return price

# Dataset 1: Uniformly Sampled Stock Prices
np.random.seed(42)
num_samples = 0
S_min, S_max = 1, 200   
T = 1.0                 
K = 100.0              

S_samples = np.random.uniform(S_min, S_max, num_samples)
t_samples = np.random.uniform(0, T, num_samples)
sigma_samples = np.random.uniform(0.1, 0.5, num_samples)
r_samples = np.random.uniform(0.01, 0.1, num_samples)

prices = black_scholes_call(S_samples, t_samples, sigma_samples, r_samples, K, T)

df_uniform = pd.DataFrame({
    'S': S_samples,
    't': t_samples,
    'sigma': sigma_samples,
    'r': r_samples,
    'price': prices
})
print("Uniform-sampled dataset (first 5 rows):")
print(df_uniform.head(8))

# Dataset 2: Stock Prices Following Geometric Brownian Motion
num_samples2 = 20000
S0_samples = np.random.uniform(S_min, S_max, num_samples2)
t_samples2 = np.random.uniform(0, T, num_samples2)
sigma_samples2 = np.random.uniform(0.1, 0.5, num_samples2)
mu_samples = np.random.uniform(0.05, 0.15, num_samples2)
r_samples2 = np.random.uniform(0.01, 0.1, num_samples2)

def geometric_BM (S0, t, sigma, mu):
    W_t = np.random.normal(0, np.sqrt(t))
    return S0 * np.exp(sigma * W_t + (mu - 0.5 * sigma**2) * t)


S_gbm = geometric_BM(S0_samples, t_samples2, sigma_samples2, mu_samples)
prices_gbm = black_scholes_call(S_gbm, t_samples2, sigma_samples2, r_samples2, K, T)

df_gbm = pd.DataFrame({
    'S': S_gbm,
    't': t_samples2,
    'sigma': sigma_samples2,
    'r': r_samples2,
    'price': prices_gbm
})
print("\nGBM-based dataset (first 5 rows):")
print(df_gbm.head(8))


df_combined = pd.concat([df_uniform, df_gbm], ignore_index=True)


X = df_combined[['S', 't', 'sigma', 'r']].values.astype(np.float32)
y = df_combined['price'].values.astype(np.float32).reshape(-1, 1)
# print("Features shape:", X.shape)
# print("Target shape:", y.shape)

# --- (The rest of the code follows: splitting the data, converting to PyTorch tensors, 
# training the neural network, and plotting results.) ---


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train_tensor = torch.from_numpy(X_train)
y_train_tensor = torch.from_numpy(y_train)
X_test_tensor = torch.from_numpy(X_test)
y_test_tensor = torch.from_numpy(y_test)

train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
test_dataset = TensorDataset(X_test_tensor, y_test_tensor)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

class MLP(nn.Module):
    def __init__(self, input_dim=4, hidden_dim=64, output_dim=1):
        super(MLP, self).__init__()
        self.net = nn.Sequential(
            nn.Linear(input_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, output_dim)
        )
        
    def forward(self, x):
        return self.net(x)

model = MLP()
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

num_epochs = 200
train_losses = []
test_losses = []

for epoch in range(num_epochs):
    model.train()
    running_train_loss = 0.0
    for features, target in train_loader:
        optimizer.zero_grad()
        outputs = model(features)
        loss = criterion(outputs, target)
        loss.backward()
        optimizer.step()
        running_train_loss += loss.item() * features.size(0)
    train_loss = running_train_loss / len(train_loader.dataset)
    
    if (epoch + 1) % 20 == 0:
        model.eval()
        running_test_loss = 0.0
        with torch.no_grad():
            for features, target in test_loader:
                outputs = model(features)
                loss = criterion(outputs, target)
                running_test_loss += loss.item() * features.size(0)
        test_loss = running_test_loss / len(test_loader.dataset)
        train_losses.append(train_loss)
        test_losses.append(test_loss)
        print(f"Epoch [{epoch+1}/{num_epochs}], Train Loss: {train_loss:.4f}, Test Loss: {test_loss:.4f}")

# # Save the model (if needed)
# torch.save(model.state_dict(), "black_scholes_surrogate_model.pth")
# print("Model saved as black_scholes_surrogate_model.pth")

# Visualization: Loss curves
plt.figure(figsize=(8, 6))
epochs_plot = np.arange(20, num_epochs + 1, 20)
plt.plot(epochs_plot, train_losses, label='Train Loss', marker='o')
plt.plot(epochs_plot, test_losses, label='Test Loss', marker='o')
plt.xlabel('Epoch')
plt.ylabel('Loss (MSE)')
plt.title('Training and Test Loss over Epochs')
plt.legend()
plt.grid(True)

# Visualization: Scatter plot (Predicted vs. True Option Prices)
model.eval()
with torch.no_grad():
    y_pred = model(X_test_tensor).numpy()
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('True Price')
plt.ylabel('Predicted Price')
plt.title('Predicted vs. True Option Prices')
plt.grid(True)

plt.show()